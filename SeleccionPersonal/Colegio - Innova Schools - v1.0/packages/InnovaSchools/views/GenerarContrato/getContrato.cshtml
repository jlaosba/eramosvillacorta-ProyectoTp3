@model InnovaSchools.Models.GenerarContratoViewModel
@using InnovaSchools.Util

@{
    ViewBag.Title = "Agregar Información de Contrato";
}

<div class="jumbotron">
    <h4>AGREGAR INFORMACIÓN DE CONTRATO</h4>
    <hr />
    <form class="form-horizontal">
        <div class="form-inline">
            <div class="form-group">
                @Html.Label("Nro de Contrato", htmlAttributes: new {@id = "lblNroContato", @class = "control-label", @style = "width:250px;" })
                @Html.TextBoxFor(x => x.nroContrato, new { @id = "txtNroContato", @class = "form-control input-sm", @style = "width:175px;", @maxlength = "8", @disabled = "disabled" })
            </div>
            <div class="form-group">
            </div>
            <div class="form-group">
            </div>
        </div>
        <div class="form-inline">
            <div class="form-group">
                @Html.Label("Tipo Docum Identidad", htmlAttributes: new { @id = "ddlDocumentoIdentidad", @class = "control-label", @style = "width:250px;" })
                @Html.DropDownListFor(m => m.SelectedDocumentoIdentidadId, new SelectList(Model.DocumentoIdentidads, "Value", "Text", "0"), "--Seleccionar--", new { @class = "form-control input-sm", @style = "width:175px;", @disabled = "disabled" })
                @Html.ValidationMessageFor(m => m.SelectedDocumentoIdentidadId)
            </div>
            <div class="form-group">
                @*@Html.LabelFor(model => model.Convocatoria.ConvocatoriaCandidato.Candidato.Persona.documentoIdentidad, htmlAttributes: new { @class = "control-label", @style = "width:170px;" })*@
                @Html.Label("Documento de Identidad", htmlAttributes: new { @class = "control-label", @style = "width:200px;" })
                @Html.TextBoxFor(x => x.Convocatoria.ConvocatoriaCandidato.Candidato.Persona.documentoIdentidad, new { @id = "txtDNI", @class = "form-control input-sm", @style = "width:175px;", @maxlength = "8", @disabled = "disabled" })
            </div>
            <div class="form-group">
            </div>
        </div>
        <div class="form-inline">
            <div class="form-group">
                @Html.Label("Nombre", htmlAttributes: new { @class = "control-label", @style = "width:250px;" })
                @Html.TextBoxFor(x => x.Convocatoria.ConvocatoriaCandidato.Candidato.Persona.nombre, new { @id = "txtNombre", @class = "form-control input-sm", @style = "width:175px;", @maxlength = "15", @disabled = "disabled" })
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Convocatoria.ConvocatoriaCandidato.Candidato.Persona.Nacionalidad.nacionalidad, htmlAttributes: new { @class = "control-label", @style = "width:200px;" })
                @Html.TextBoxFor(x => x.Convocatoria.ConvocatoriaCandidato.Candidato.Persona.Nacionalidad.nacionalidad, new { @id = "txtNacionalidad", @class = "form-control input-sm", @style = "width:175px;", @maxlength = "15", @disabled = "disabled" })
            </div>
            <div class="form-group">
            </div>
        </div>
        <div class="form-inline">
            <div class="form-group">
                @Html.Label("Ape Paterno", htmlAttributes: new { @class = "control-label", @style = "width:250px;" })                
                @Html.TextBoxFor(x => x.Convocatoria.ConvocatoriaCandidato.Candidato.Persona.apellidoPaterno, new { @id = "txtApPaterno", @class = "form-control input-sm", @style = "width:175px;", @maxlength = "30", @disabled = "disabled" })
            </div>
            <div class="form-group">
                @Html.Label("Ape Materno", htmlAttributes: new { @class = "control-label", @style = "width:200px;" })
                @Html.TextBoxFor(x => x.Convocatoria.ConvocatoriaCandidato.Candidato.Persona.apellidoMaterno, new { @id = "txtApMaterno", @class = "form-control input-sm", @style = "width:175px;", @maxlength = "30", @disabled = "disabled" })
            </div>
            <div class="form-group">
            </div>
        </div>
        <div class="form-inline">
            <div class="form-group">
                @Html.Label("Tipo Puesto", htmlAttributes: new { @id = "ddlTipoPuesto", @class = "control-label", @style = "width:250px;" })
                @Html.DropDownListFor(m => m.SelectedTipoPuestoId, new SelectList(Model.TipoPuestos, "Value", "Text", "0"), "--Seleccionar--", new { @class = "form-control input-sm", @style = "width:175px; ", @disabled = "disabled" })
                @Html.ValidationMessageFor(m => m.SelectedTipoPuestoId)  
            </div>
            <div class="form-group">
                @Html.Label("Puesto", htmlAttributes: new { @id = "ddlPuesto", @class = "control-label", @style = "width:200px;" })
                @Html.DropDownListFor(m => m.SelectedPuestoId, new SelectList(Model.Puestos, "Value", "Text", "0"), "--Seleccionar--", new { @class = "form-control input-sm", @style = "width:175px; ", @disabled = "disabled" })
                @Html.ValidationMessageFor(m => m.SelectedPuestoId)  
            </div>
            <div class="form-group">
            </div>
        </div>
        <div class="form-inline">
            <div class="form-group">
                @Html.Label("Área", htmlAttributes: new { @class = "control-label", @style = "width:250px;" })
                @Html.TextBoxFor(x => x.Convocatoria.Area.descripcionArea, new { @id = "txtArea", @class = "form-control input-sm", @style = "width:175px;", @maxlength = "30", @disabled = "disabled" })
            </div>
            <div class="form-group">
                @Html.Label("Desarrollo", htmlAttributes: new { @class = "control-label", @style = "width:200px;" })
                @Html.TextBoxFor(x => x.Convocatoria.Desarrollo.descripcionDesarrollo, new { @id = "txtDesarrollo", @class = "form-control input-sm", @style = "width:175px;", @maxlength = "30", @disabled = "disabled" })
            </div>
            <div class="form-group">
            </div>
        </div>
    </form>
    <hr style="color: #0056b2;" />
    <form class="form-horizontal">
        <div class="form-inline">
             <div class="form-group">
                @Html.Label("Tipo de Contrato", htmlAttributes: new { @id = "ddlTipoContrato", @class = "control-label", @style = "width:250px;" })
                @Html.DropDownListFor(m => m.SelectedTipoContratoId, new SelectList(Model.TipoContratos, "Value", "Text", "0"), "--Seleccionar--", new { @class = "form-control input-sm", @style = "width:175px; border-color: red" })
                @Html.ValidationMessageFor(m => m.SelectedTipoContratoId)               
            </div>
            <div class="form-group">
                @Html.Label("Duración", htmlAttributes: new { @id = "ddlTipoContratoTiempo", @class = "control-label", @style = "width:200px;" })
                @Html.DropDownListFor(m => m.SelectedTipoContratoTiempoId, new SelectList(Model.TipoContratoTiempos, "Value", "Text", "0"), "--Seleccionar--", new { @class = "form-control input-sm", @style = "width:175px; border-color: red" })
                @Html.ValidationMessageFor(m => m.SelectedTipoContratoTiempoId)               
            </div>           
            <div class="form-group">
            </div>
        </div>
        <div class="form-inline">
            <div class="form-group">
                @Html.LabelFor(model => model.fechaIngreso, htmlAttributes: new { @class = "control-label", @style = "width:250px;" })
                @Html.TextBox("ddlFecha_ingreso", "", new { @class = "date-picker", @style = "border-color: red; text-align: center" })
                @Html.ValidationMessageFor(model => model.fechaIngreso, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.fechaCese, htmlAttributes: new { @class = "control-label", @style = "width:200px;" })
                @Html.TextBox("ddlFecha_cese", "", new { @class = "date-picker", @style = "text-align: center", @disabled = "disabled" })
                @Html.ValidationMessageFor(model => model.fechaCese, "", new { @class = "text-danger" })             
            </div>
            <div class="form-group">
            </div>
        </div>
        <div class="form-inline">
            <div class="form-group">
                @Html.Label("Grado", htmlAttributes: new { @id = "lblGrado", @class = "control-label", @style = "width:250px;" })
                @Html.DropDownListFor(m => m.SelectedNivelEstudioId, new SelectList(Model.NivelEstudios, "Value", "Text", "0"), "--Seleccionar--", new { @class = "form-control input-sm", @style = "width:175px; border-color: red" })
                @Html.ValidationMessageFor(m => m.SelectedNivelEstudioId)   
            </div>            
            <div class="form-group">               
                @Html.Label("Estado Candidato", htmlAttributes: new { @id = "lblEstadoCandidato", @class = "control-label", @style = "width:200px;" })
                @Html.TextBoxFor(x => x.estadoCandidato, new { @id = "txtEstadoCandidato", @class = "form-control input-sm", @style = "width:175px;", @disabled = "disabled" })
            </div>          
            <div class="form-group">
            </div>
        </div>
        <div class="form-inline">            
            <div class="form-group">
                @Html.LabelFor(model => model.salario, htmlAttributes: new { @class = "control-label", @style = "width:250px;" })
                @Html.TextBoxFor(x => x.salario, new { @id = "txtSalario", @class = "form-control input-br-sm", @style = "width:175px; border-color: red", @maxlength = "7" })
                @*@Html.LabelFor(model => model.Convocatoria.ConvocatoriaCandidato.Candidato.Persona.apellidoMaterno, htmlAttributes: new { @class = "control-label", @style = "width:200px;" })
                @Html.TextBoxFor(x => x.Convocatoria.ConvocatoriaCandidato.Candidato.Persona.apellidoMaterno, new { @id = "txtApMaterno", @class = "form-control input-sm", @style = "width:175px;", @maxlength = "30", @disabled = "disabled" })*@
            </div>
            <div class="form-group">
                @Html.Label("Seguro", htmlAttributes: new { @id = "ddlSeguro", @class = "control-label", @style = "width:200px;" })
                @Html.DropDownListFor(m => m.SelectedSeguroId, new SelectList(Model.Seguros, "Value", "Text", "0"), "--Seleccionar--", new { @class = "form-control input-sm", @style = "width:175px; border-color: red" })
                @Html.ValidationMessageFor(m => m.SelectedSeguroId)   
            </div>
            <div class="form-group">
            </div>
        </div>        
        <div class="form-inline">
            <div class="form-group">
                @Html.Label("Banco", htmlAttributes: new { @id = "lblBanco", @class = "control-label", @style = "width:250px;" })
                @Html.DropDownListFor(m => m.SelectedBancoId, new SelectList(Model.Bancos, "Value", "Text", "0"), "--Seleccionar--", new { @class = "form-control input-sm", @style = "width:175px; border-color: red" })
                @Html.ValidationMessageFor(m => m.SelectedBancoId)   
            </div>            
            <div class="form-group">               
                @Html.Label("Prefijo Cuenta", htmlAttributes: new { @id = "lblPrefijoCuenta", @class = "control-label", @style = "width:200px;" })
                @Html.TextBoxFor(x => x.prefijoCuenta, new { @id = "txtPrefijoCtaBanco", @class = "form-control input-sm", @style = "width:60px;", @maxlength = "4", @disabled = "disabled" })
                @Html.TextBoxFor(x => x.cuentaBanco, new { @id = "txtCtaBanco", @class = "form-control input-br-sm", @style = "width:110px; border-color: red", @maxlength = "20" })
            </div>          
            <div class="form-group">
            </div>
        </div>
        
        <div class="form-inline">
            <div class="form-group">
                <br />
                @Html.Label(" ", htmlAttributes: new { @class = "control-label", @style = "width:250px;" })
                <input type="button" id="btn-grabar" value="Grabar" class="btn btn-success btn-sm" />
                @Html.ActionLink("Cancelar", "Index", null, null, htmlAttributes: new { @class = "btn btn-danger btn-sm" })
            </div>
            <div class="form-group">
            </div>
        </div>
    </form>    
</div>

@section Scripts {
    @*<link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">*@
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
    <script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>


    <script src="~/Scripts/bootstrap-filestyle.min.js" type="text/javascript"></script>
    <script src="//code.jquery.com/ui/1.10.4/jquery-ui.js"></script>
    <script src="~/Scripts/jquery.maskedinput.min.js"></script>

    <script type="text/javascript">
        $(document).ready(function () {
            $('#lblNroContato').hide();
            $("#txtNroContato").css("display", "none");

            $.datepicker.regional['es'] = {
                closeText: 'Cerrar',
                prevText: '<Ant',
                nextText: 'Sig>',
                currentText: 'Hoy',
                monthNames: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
                monthNamesShort: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],
                dayNames: ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'],
                dayNamesShort: ['Dom', 'Lun', 'Mar', 'Mié', 'Juv', 'Vie', 'Sáb'],
                dayNamesMin: ['Do', 'Lu', 'Ma', 'Mi', 'Ju', 'Vi', 'Sá'],
                weekHeader: 'Sm',
                dateFormat: 'dd/mm/yy',
                firstDay: 1,
                isRTL: false,
                showMonthAfterYear: false,
                yearSuffix: ''
            };
            $.datepicker.setDefaults($.datepicker.regional['es']);

            $("#ddlFecha_ingreso").datepicker({
                minDate: new Date(),
                onClose: function (selectedDate) {
                    $("#ddlFecha_cese").datepicker("option", "minDate", selectedDate);
                },
            });

            $("#ddlFecha_cese").datepicker({
                onClose: function (selectedDate) {
                    $("#ddlFecha_ingreso").datepicker("option", "maxDate", selectedDate);
                }
            });
            $("#ddlFecha_ingreso").datepicker({ dateFormat: "dd/mm/yy" }).mask("99/99/9999");
            $("#ddlFecha_cese").datepicker({ dateFormat: "dd/mm/yy" }).mask("99/99/9999");

            var vIdBanco = $('#SelectedBancoId').val();           
            switch (vIdBanco) {
                case '1':
                    $("#txtCtaBanco").attr('maxlength', '20');
                    break;
                case '2':
                    $("#txtCtaBanco").attr("maxlength", "13");
                    break;
                case '3':
                    $("#txtCtaBanco").attr('maxlength', 10);
                    break;
                case '4':
                    $("#txtCtaBanco").attr("maxlength", "13");
                    break;
            }

            var d = new Date();
            var day = d.getDate();
            var month = d.getMonth() + 1;
            var output =
                (day < 10 ? '0' : '') + day + '/' +
                (month < 10 ? '0' : '') + month + '/' +
                d.getFullYear();

            $("#ddlFecha_ingreso").val(output);
            $("#ddlFecha_cese").val(output);

            $("#SelectedTipoContratoTiempoId").attr("disabled", "disabled");
            $("#SelectedTipoContratoTiempoId").css("border-color", "lightgray");

        });
        $(".input-sm").keypress(function (key) {
            window.console.log(key.charCode)
            if ((key.charCode < 97 || key.charCode > 122)//letras mayusculas
                && (key.charCode < 65 || key.charCode > 90) //letras minusculas
                && (key.charCode != 45) //retroceso
                && (key.charCode != 241) //ñ
                 && (key.charCode != 209) //Ñ
                 && (key.charCode != 32) //espacio
                 && (key.charCode != 225) //á
                 && (key.charCode != 233) //é
                 && (key.charCode != 237) //í
                 && (key.charCode != 243) //ó
                 && (key.charCode != 250) //ú
                 && (key.charCode != 193) //Á
                 && (key.charCode != 201) //É
                 && (key.charCode != 205) //Í
                 && (key.charCode != 211) //Ó
                 && (key.charCode != 218) //Ú
                )
                return false;
        });
        $("#txtDNI").on("keydown", numericTextBox);
        $("#txtTelefono").on("keydown", numericTextBox);
        $("#txtCelular").on("keydown", numericTextBox);
        $("#txtSalario").on("keydown", numericTextBox);
        

        $("#txtCtaBanco").on("keydown", numericTextBox);
        function numericTextBox(e) {
            if (
                e.keyCode == 8 // backspace
                || e.keyCode == 9 // tab
                || e.keyCode == 13 // enter
                || e.keyCode == 27 // escape
                || e.keyCode == 46 // delete
                || (e.keyCode >= 35 && e.keyCode <= 39) // end, home, left arrow, up arrow, right arrow
            ) {
                return;
            }
            else {
                if (!((e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 96 && e.keyCode <= 105))) {
                    // not 0-9, numpad 0-9
                    e.preventDefault();
                    return;
                }
                else {
                    var keyCode = e.keyCode;
                    if (keyCode >= 96 && keyCode <= 105) {
                        keyCode -= 48;
                    }
                    var value = $(this).val();
                    value += String.fromCharCode(keyCode);
                    value = parseInt(value, 10)
                    var maxNumber = $(this).data("maxnumber");
                    if (maxNumber) {
                        maxNumber = parseInt(maxNumber);
                        if (value > maxNumber) {
                            e.preventDefault();
                        }
                    }
                }
            }
        }
        $(function () {
            $("#SelectedBancoId").change(function () {
                var vIdBanco = $('#SelectedBancoId').val();
                if (vIdBanco == 0) {
                    WarningMessage("Debe seleccionar una Entidad Bancaría");
                    return;
                }
                switch (vIdBanco) {
                    case '1':
                        $("#txtCtaBanco").val('');
                        $("#txtCtaBanco").attr('maxlength', '20');
                        break;
                    case '2':
                        $("#txtCtaBanco").val('');
                        $("#txtCtaBanco").attr("maxlength", "13");
                        break;
                    case '3':
                        $("#txtCtaBanco").val('');
                        $("#txtCtaBanco").attr('maxlength', 10);
                        break;
                    case '4':
                        $("#txtCtaBanco").val('');
                        $("#txtCtaBanco").attr("maxlength", "13");
                        break;
                }

                $.ajax({
                    url: "/GenerarContrato/getPrefijoCtaBanco",
                    data: {
                        'pIdBanco': vIdBanco
                    },
                    async: false,
                    success: function (data) {
                        if (data) {
                            $("#txtPrefijoCtaBanco").val(data);
                        } else {
                            WarningMessage("No se obtuvo el dato correcto");
                        }
                    },
                    error: function (ex) {
                        console.log(ex);
                    },
                    complete: function (xhr, textStatus) {

                    }
                });
            });
        });
        $(function () {
            $("#SelectedTipoContratoId").change(function () {
                var vIdTipoContrato = $('#SelectedTipoContratoId').val();
                if (vIdTipoContrato == 1) {
                    $("#SelectedTipoContratoTiempoId").attr("disabled", "disabled");
                    //$("#ddlFecha_cese").attr("disabled", "disabled");

                    $("#SelectedTipoContratoTiempoId").css("border-color", "lightgray");
                    //$("#ddlFecha_cese").css("border-color", "lightgray");

                    return;
                } else {
                    $("#SelectedTipoContratoTiempoId").removeAttr("disabled");
                    //$("#ddlFecha_cese").removeAttr("disabled");

                    $("#SelectedTipoContratoTiempoId").css("border-color", "red");
                    //$("#ddlFecha_cese").css("border-color", "red");
                    return
                }
            });
        });
        function duracion() {            
            var vIdTipoContrato = $('#SelectedTipoContratoId').val();
            var vIdTipoContratoTiempo = $('#SelectedTipoContratoTiempoId').val();

            var from = $("#ddlFecha_ingreso").val().split("/");
            var d = new Date(from[2], from[1] - 1, from[0]);
            if (vIdTipoContrato > 1) {
                if (vIdTipoContratoTiempo == 1) {
                    d.setMonth(d.getMonth() + 7);
                }
                if (vIdTipoContratoTiempo == 2) {
                    d.setMonth(d.getMonth() + 13);
                }
            }
            if (vIdTipoContrato > 1) {
                if (vIdTipoContratoTiempo > 0) {
                    var month = d.getMonth()
                    var out = d.getDate() + '/' + (month < 10 ? '0' : '') + month + '/' + d.getFullYear();
                    $("#ddlFecha_cese").val(out);
                    return;
                }
            }
        };
        $(function () {
            $("#SelectedTipoContratoTiempoId").change(function () {
                duracion();
            });
        });
        $(function () {
            $("#ddlFecha_ingreso").change(function () {
                var d = new Date();
                var day = d.getDate();

                var month = d.getMonth() + 1;

                var output = 
                    (day < 10 ? '0' : '') + day + '/' +
                    (month < 10 ? '0' : '') + month + '/' +
                    d.getFullYear() ;

                var vIdTipoContrato = $('#SelectedTipoContratoId').val();
                if (vIdTipoContrato == 1) {
                    $("#ddlFecha_cese").val(output);
                    return;
                } else {
                    duracion();
                }
            });
        });

        $(function () {
            $("#txtSalario").change(function () {
                var dato = $("#txtSalario").val();
                var valor = dato.substring(0, 1)
                var lng = dato.length;
                if (valor == 0) {
                    $("#txtSalario").val($("#txtSalario").val().substring(1,lng-1));
                    //return false;
                }
            });
        });



        $(function () {
            $("#btn-grabar").on("click", function () {
                var vDniVal = $('#txtDNI').val();
                var vTipoContratoVal = $('#SelectedTipoContratoId').val();
                if (vTipoContratoVal == 0) {
                    WarningMessage("Debe seleccionar un tipo de contrato");
                    return;
                }
                var vTipoContratoTiempoVal = $('#SelectedTipoContratoTiempoId').val();
                if (vTipoContratoVal != 1 && vTipoContratoTiempoVal == 0) {
                    WarningMessage("Debe seleccionar Duración");
                    return;
                } else {
                    vTipoContratoTiempoVal = 0;
                }
                var vFechaInicioVal = $('#ddlFecha_ingreso').val();
                if (vFechaInicioVal == "") {
                    WarningMessage("Debe ingresar una Fecha de Inicio de contrato");
                    return;
                }
                var vFechaFinVal = $('#ddlFecha_cese').val();
                if (vTipoContratoVal != 1 && vFechaFinVal == "") {
                    WarningMessage("Debe ingresar una Fecha de Fin de contrato");
                    return;
                }
                var vIdNivelEstudioVal = $('#SelectedNivelEstudioId').val();
                if (vIdNivelEstudioVal == 0) {
                    WarningMessage("Debe seleccionar Grado");
                    return;
                }
                var vSalarioVal = $('#txtSalario').val();
                if (vSalarioVal <= 0) {
                    WarningMessage("Debe ingresar un salario");
                    return;
                }
                //if (vSalarioVal < 0) {

                //}

                var vIdSeguroVal = $('#SelectedSeguroId').val();
                if (vIdSeguroVal == 0) {
                    WarningMessage("Debe seleccionar Seguro");
                    return;
                }
                var vIdBancoVal = $('#SelectedBancoId').val();
                if (vIdBancoVal == 0) {
                    WarningMessage("Debe seleccionar Banco");
                    return;
                }
                var vCuentaBancoVal = $('#txtCtaBanco').val();
                if (vCuentaBancoVal == "") {
                    WarningMessage("Debe de ingresar su número de cuenta bancaría");
                    return;
                }

                switch (vIdBancoVal) {
                    case '1':
                        if (vCuentaBancoVal.length != 20) {
                            WarningMessage("Debe de ingresar una cuenta de 20 dígitos");
                            return;
                        }
                        break;
                    case '2':
                        if (vCuentaBancoVal.length != 13) {
                            WarningMessage("Debe de ingresar una cuenta de 13 dígitos");
                            return;
                        }
                        break;
                    case '3':
                        if (vCuentaBancoVal.length != 10) {
                            WarningMessage("Debe de ingresar una cuenta de 10 dígitos");
                            return;
                        }
                        break;
                    case '4':
                        if (vCuentaBancoVal.length != 13) {
                            WarningMessage("Debe de ingresar una cuenta de 13 dígitos");
                            return;
                        }
                        break;
                }

                $.ajax({
                    url: "/GenerarContrato/setEmpleado",
                    data: {
                           'pDni': vDniVal, 'pTipoContrato': vTipoContratoVal, 'pSalario': vSalarioVal,
                           'pFechaInicio': vFechaInicioVal, 'pFechaFin': vFechaFinVal, 'pIdConvocatoriaTiempo': vTipoContratoTiempoVal,
                           'pIdSeguro': vIdSeguroVal, 'pIdBanco': vIdBancoVal, 'pIdNivelEstudio': vIdNivelEstudioVal, 'pCuentaBanco': vCuentaBancoVal
                        },
                    async: false,
                    success: function (data) {
                        if (data) {
                            $("#SelectedTipoContratoId").attr("disabled", "disabled");
                            $("#SelectedTipoContratoTiempoId").attr("disabled", "disabled");
                            $("#ddlFecha_ingreso").attr("disabled", "disabled");
                            $("#ddlFecha_cese").attr("disabled", "disabled");
                            $("#SelectedNivelEstudioId").attr("disabled", "disabled");
                            $("#txtSalario").attr("disabled", "disabled");
                            $("#SelectedSeguroId").attr("disabled", "disabled");
                            $("#SelectedBancoId").attr("disabled", "disabled");
                            $("#txtCtaBanco").attr("disabled", "disabled");
                            $("#btn-grabar").attr("disabled", "disabled");

                            $('#lblNroContato').show("swing");
                            $("#txtNroContato").show("swing"); //.css("display", "block");
                            $("#txtNroContato").val(data);
                            WarningMessage("Se creo el contrato número:" + data);
                        } else {
                            WarningMessage("No se realizo la modificaciones");
                        }
                    },
                    error: function (ex) {
                        console.log(ex);
                    },
                    complete: function (xhr, textStatus) {

                    }
                });
            });
        });
    </script>
}