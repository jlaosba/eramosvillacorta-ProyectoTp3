@model InnovaSchools.Models.ActualizarPersonalViewModel
@using InnovaSchools.Util

@{
    ViewBag.Title = "Editar Información del Personal";
}

<div class="jumbotron">
    <h4>ACTUALIZAR INFORMACIÓN DEL PERSONAL</h4>
    <hr />
    <form class="form-horizontal">
        <div class="form-inline">
            <div class="form-group">
                @Html.Label("Tipo Documento", htmlAttributes: new { @id = "ddlTipoDocumento", @class = "control-label", @style = "width:170px;" })
                @Html.DropDownListFor(m => m.SelectedDocumentoIdentidadId, new SelectList(Model.DocumentoIdentidads, "Value", "Text", "0"), "--Seleccionar--", new { @class = "form-control input-sm", @style = "width:175px;", @disabled = "disabled" })
                @Html.ValidationMessageFor(m => m.SelectedDocumentoIdentidadId)
            </div>
            <div class="form-group">
                @Html.Label("Documento Identidad", htmlAttributes: new { @id = "ddlTipoDocumento", @class = "control-label", @style = "width:200px;" })
                @Html.TextBoxFor(x => x.Contrato.Empleado.Candidato.Persona.documentoIdentidad, new { @id = "txtDocumentoIdentidad", @class = "form-control input-sm", @style = "width:175px;", @maxlength = "8", @disabled = "disabled" })
            </div>            
            <div class="form-group">
            </div>
        </div>
        <div class="form-inline">
            <div class="form-group">
                @Html.LabelFor(model => model.Contrato.Empleado.Candidato.Persona.nombre, htmlAttributes: new { @class = "control-label", @style = "width:170px;" })
                @Html.TextBoxFor(x => x.Contrato.Empleado.Candidato.Persona.nombre, new { @id = "txtNombre", @class = "form-control input-sm", @style = "width:175px;", @maxlength = "15", @disabled = "disabled" })
            </div>
            <div class="form-group">
            </div>
            <div class="form-group">
            </div>
        </div>
        <div class="form-inline">
            <div class="form-group">
                @Html.LabelFor(model => model.Contrato.Empleado.Candidato.Persona.apellidoPaterno, htmlAttributes: new { @class = "control-label", @style = "width:170px;" })
                @Html.TextBoxFor(x => x.Contrato.Empleado.Candidato.Persona.apellidoPaterno, new { @id = "txtApPaterno", @class = "form-control input-sm", @style = "width:175px;", @maxlength = "30", @disabled = "disabled" })
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Contrato.Empleado.Candidato.Persona.apellidoMaterno, htmlAttributes: new { @class = "control-label", @style = "width:200px;" })
                @Html.TextBoxFor(x => x.Contrato.Empleado.Candidato.Persona.apellidoMaterno, new { @id = "txtApMaterno", @class = "form-control input-sm", @style = "width:175px;", @maxlength = "30", @disabled = "disabled" })
            </div>
            <div class="form-group">
            </div>
        </div>
        <div class="form-inline">
            <div class="form-group">
                @Html.LabelFor(model => model.Contrato.Empleado.Candidato.Persona.fechaNacimiento, htmlAttributes: new { @class = "control-label", @style = "width:170px;" })
                @Html.TextBoxFor(x => x.Contrato.Empleado.Candidato.Persona.fechaNacimiento, new { @id = "txtFchNacimiento", @class = "form-control input-sm", @style = "width:175px;", @maxlength = "30", @disabled = "disabled" })
            </div>
            <div class="form-group">
                @Html.Label("Nacionalidad", htmlAttributes: new { @id = "ddlNacionalidad", @class = "control-label", @style = "width:200px;" })
                @Html.DropDownListFor(m => m.SelectedNacionalidadId, new SelectList(Model.Nacionalidads, "Value", "Text", "0"), "--Seleccionar--", new { @class = "form-control input-sm", @style = "width:175px;", @disabled = "disabled"})
                @Html.ValidationMessageFor(m => m.SelectedNacionalidadId)
            </div>
            <div class="form-group">
            </div>
        </div>
        <div class="form-inline">
            <div class="form-group">
                @Html.LabelFor(model => model.Contrato.Empleado.Candidato.Persona.direccion, htmlAttributes: new { @class = "control-label", @style = "width:170px;" })
                @Html.TextBoxFor(x => x.Contrato.Empleado.Candidato.Persona.direccion, new { @id = "txtDireccion", @class = "form-control", @style = "width:530px; border-color: red", @maxlength = "50" })
            </div>
            <div class="form-group">
            </div>
        </div>
        <div class="form-inline">
            <div class="form-group">
                @Html.LabelFor(model => model.Contrato.Empleado.Candidato.Persona.telefono, htmlAttributes: new { @class = "control-label", @style = "width:170px;" })
                @Html.TextBoxFor(x => x.Contrato.Empleado.Candidato.Persona.telefono, new { @id = "txtTelefono", @class = "form-control", @style = "width:175px; border-color: red", @maxlength = "7" })
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Contrato.Empleado.Candidato.Persona.celular, htmlAttributes: new { @class = "control-label", @style = "width:200px;" })
                @Html.TextBoxFor(x => x.Contrato.Empleado.Candidato.Persona.celular, new { @id = "txtCelular", @class = "form-control", @style = "width:175px; border-color: red", @maxlength = "9" })
            </div>
            <div class="form-group">
            </div>
        </div>
        <div class="form-inline">            
            <div class="form-group">
                @Html.LabelFor(model => model.Contrato.Empleado.Candidato.Persona.correoElectronico, htmlAttributes: new { @class = "control-label", @style = "width:170px;" })
                @Html.TextBoxFor(x => x.Contrato.Empleado.Candidato.Persona.correoElectronico, new { @id = "txtEmail", @class = "form-control", @style = "width:530px; border-color: red", @maxlength = "70", })
            </div>
            <div class="form-group">
            </div>
            <div class="form-group">
            </div>
        </div>
        <div class="form-inline">
            <div class="form-group">
                @Html.Label("Tipo Puesto", htmlAttributes: new { @id = "ddlTipoPuesto", @class = "control-label", @style = "width:170px;" })
                @Html.DropDownListFor(m => m.SelectedTipoPuestoId, new SelectList(Model.TipoPuestos, "Value", "Text", "0"), "--Seleccionar--", new { @class = "form-control input-sm", @style = "width:175px;", @disabled = "disabled" })
                @Html.ValidationMessageFor(m => m.SelectedTipoPuestoId)
            </div>
            <div class="form-group">
                @Html.Label("Puesto", htmlAttributes: new { @id = "ddlPuesto", @class = "control-label", @style = "width:200px;" })
                @Html.DropDownListFor(m => m.SelectedPuestoId, new SelectList(Model.Puestos, "Value", "Text", "0"), "--Seleccionar--", new { @class = "form-control input-sm", @style = "width:175px;", @disabled = "disabled"  })
                @Html.ValidationMessageFor(m => m.SelectedPuestoId)
            </div>            
            <div class="form-group">
            </div>
        </div>
        <div class="form-inline">
            <div class="form-group">
                @Html.Label("Área", htmlAttributes: new { @id = "ddlArea", @class = "control-label", @style = "width:170px;" })
                @Html.DropDownListFor(m => m.SelectedAreaId, new SelectList(Model.Areas, "Value", "Text", "0"), "--Seleccionar--", new { @class = "form-control input-sm", @style = "width:175px;", @disabled = "disabled" })
                @Html.ValidationMessageFor(m => m.SelectedAreaId)
            </div>
            <div class="form-group">
                @Html.Label("Desarrollo", htmlAttributes: new { @id = "ddlDesarrollo", @class = "control-label", @style = "width:200px;" })
                @Html.DropDownListFor(m => m.SelectedDesarrolloId, new SelectList(Model.Desarrollos, "Value", "Text", "0"), "--Seleccionar--", new { @class = "form-control input-sm", @style = "width:175px;", @disabled = "disabled" })
                @Html.ValidationMessageFor(m => m.SelectedDesarrolloId)
            </div>
            <div class="form-group">
            </div>
        </div>
         <div class="form-inline">            
            <div class="form-group">
                @Html.LabelFor(model => model.Contrato.Empleado.Candidato.Persona.nroHijos, htmlAttributes: new { @class = "control-label", @style = "width:170px;" })
                @Html.TextBoxFor(x => x.Contrato.Empleado.Candidato.Persona.nroHijos, new { @id = "txtNroHijos", @class = "form-control", @style = "width:175px;", @maxlength = "1" })
            </div>
             <div class="form-group">
                @Html.LabelFor(model => model.Contrato.Empleado.Candidato.Persona.genero, htmlAttributes: new { @class = "control-label", @style = "width:200px;" })
                @Html.TextBoxFor(x => x.Contrato.Empleado.Candidato.Persona.genero, new { @id = "txtGenero", @class = "form-control", @style = "width:175px;", @maxlength = "10", @disabled = "disabled" })
            </div>
             
            <div class="form-group">
            </div>
        </div>
    </form>
    <hr style="color: #0056b2;" />
    <form class="form-horizontal" enctype="multipart/form-data" method="post" action="@Url.Action("setContrato")">
        <div class="form-inline">
            <div class="form-group">
                @Html.Label("Grado", htmlAttributes: new { @id = "ddlNivelEstudio", @class = "control-label", @style = "width:170px;" })
                @Html.DropDownListFor(m => m.SelectedNivelEstudioId, new SelectList(Model.NivelEstudios, "Value", "Text", "0"), "--Seleccionar--", new { @class = "form-control input-sm", @style = "width:175px; border-color: red"})
                @Html.ValidationMessageFor(m => m.SelectedNivelEstudioId)
            </div>
            <div class="form-group">
                @Html.Label("Fondo de Pensiones", htmlAttributes: new { @id = "ddlNivelEstudio", @class = "control-label", @style = "width:200px;" })
                @Html.DropDownListFor(m => m.SelectedFondoPensioneId, new SelectList(Model.FondoPensiones, "Value", "Text", "0"), "--Seleccionar--", new { @class = "form-control input-sm", @style = "width:175px; border-color: red"})
                @Html.ValidationMessageFor(m => m.SelectedFondoPensioneId)
            </div>
            <div class="form-group">
            </div>
        </div>
        <div class="form-inline">
            <div class="form-group">
                @Html.Label("Seguro", htmlAttributes: new { @id = "ddlSeguro", @class = "control-label", @style = "width:170px;" })
                @Html.DropDownListFor(m => m.SelectedSeguroId, new SelectList(Model.Seguros, "Value", "Text", "0"), "--Seleccionar--", new { @class = "form-control input-sm", @style = "width:175px; border-color: red"})
                @Html.ValidationMessageFor(m => m.SelectedSeguroId)
            </div>
            <div class="form-group">
               @Html.Label("Estado Empleado", htmlAttributes: new { @id = "ddlNivelEstudio", @class = "control-label", @style = "width:200px;" })
                @Html.DropDownListFor(m => m.SelectedEstadoEmpleadoId, new SelectList(Model.EstadoEmpleados, "Value", "Text", "0"), "--Seleccionar--", new { @class = "form-control input-sm", @style = "width:175px; border-color: red"})
                @Html.ValidationMessageFor(m => m.SelectedEstadoEmpleadoId)
            </div>
            <div class="form-group">
            </div>
        </div>        
        <div class="form-inline">
            <div class="form-group">
                @Html.LabelFor(model => model.Contrato.Empleado.contactoEmergencia, htmlAttributes: new { @class = "control-label", @style = "width:170px;" })
                @Html.TextBoxFor(x => x.Contrato.Empleado.contactoEmergencia, new { @id = "txtContactoEmergencia", @class = "form-control input-sm", @style = "width:175px; border-color: red", @maxlength = "50" })
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Contrato.Empleado.telefonoEmergencia, htmlAttributes: new { @class = "control-label", @style = "width:200px;" })
                @Html.TextBoxFor(x => x.Contrato.Empleado.telefonoEmergencia, new { @id = "txtTelefonoEmergencia", @class = "form-control", @style = "width:175px; border-color: red", @maxlength = "15" })
            </div>
            <div class="form-group">
            </div>
        </div>
        <div class="form-inline">
            <div class="form-group">
                @Html.Label("Banco", htmlAttributes: new { @id = "ddlBanco", @class = "control-label", @style = "width:170px;" })
                @Html.DropDownListFor(m => m.SelectedBancoId, new SelectList(Model.Bancos, "Value", "Text", "0"), "--Seleccionar--", new { @class = "form-control input-sm", @style = "width:175px; border-color: red"})
                @Html.ValidationMessageFor(m => m.SelectedBancoId)
            </div>
            <div class="form-group">               
                @Html.LabelFor(model => model.Contrato.Empleado.Banco.prefijoCuenta, htmlAttributes: new { @class = "control-label", @style = "width:200px;" })
                @Html.TextBoxFor(x => x.Contrato.Empleado.Banco.prefijoCuenta, new { @id = "txtPrefijoCtaBanco", @class = "form-control", @style = "width:60px;", @maxlength = "4", @disabled = "disabled" })
                @Html.TextBoxFor(x => x.Contrato.Empleado.cuentaBanco, new { @id = "txtCtaBanco", @class = "form-control", @style = "width:110px; border-color: red", @maxlength = "20" })
            </div>
            <div class="form-group">
            </div>
        </div>

        <div class="form-inline">
            <div class="form-group">
                <br />
                @Html.Label(" ", htmlAttributes: new { @class = "control-label", @style = "width:170px;" })
                <input type="button" id="btn-grabar" value="Grabar" class="btn btn-success btn-sm" />
                @Html.ActionLink("Cancelar", "Index", null, null, htmlAttributes: new { @class = "btn btn-danger btn-sm" })
            </div>
            <div class="form-group">
            </div>
        </div>
    </form>
</div>

@section Scripts {
    @*<link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">*@
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
    <script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>


    <script src="~/Scripts/bootstrap-filestyle.min.js" type="text/javascript"></script>

    <script type="text/javascript">
        $(document).ready(function () {
            //$("#SelectedPuestoId").change(function (evt) {
            //      var value = $(this).val();
            //      if (value == 1) {
            //          $("#txtEmail").removeAttr("disabled");
            //          $("#txtEmail").css("border-color", "red");
            //      }
            //      else if (value == 2) {
            //          $("#txtEmail").val('');
            //          $("#txtEmail").attr("disabled", "disabled");
            //          $('#txtEmail').css("border-color", "lightgray");
            //      }
            //      evt.preventDefault();
            //  });
            var vIdBanco = $('#SelectedBancoId').val();
           
            switch (vIdBanco) {
                case '1':
                    $("#txtCtaBanco").attr('maxlength', '20');
                    break;
                case '2':
                    $("#txtCtaBanco").attr("maxlength", "13");
                    break;
                case '3':
                    $("#txtCtaBanco").attr('maxlength', 10);
                    break;
                case '4':
                    $("#txtCtaBanco").attr("maxlength", "13");
                    break;
            }
        });
        $(".input-sm").keypress(function (key) {
            window.console.log(key.charCode)
            if ((key.charCode < 97 || key.charCode > 122)//letras mayusculas
                && (key.charCode < 65 || key.charCode > 90) //letras minusculas
                && (key.charCode != 45) //retroceso
                && (key.charCode != 241) //ñ
                 && (key.charCode != 209) //Ñ
                 && (key.charCode != 32) //espacio
                 && (key.charCode != 225) //á
                 && (key.charCode != 233) //é
                 && (key.charCode != 237) //í
                 && (key.charCode != 243) //ó
                 && (key.charCode != 250) //ú
                 && (key.charCode != 193) //Á
                 && (key.charCode != 201) //É
                 && (key.charCode != 205) //Í
                 && (key.charCode != 211) //Ó
                 && (key.charCode != 218) //Ú
                )
                return false;
        });
        $("#txtDNI").on("keydown", numericTextBox);
        $("#txtTelefono").on("keydown", numericTextBox);
        $("#txtCelular").on("keydown", numericTextBox);
        $("#txtNroHijos").on("keydown", numericTextBox);
        $("#txtCtaBanco").on("keydown", numericTextBox);
        $("#txtTelefonoEmergencia").on("keydown", numericTextBox);
        function numericTextBox(e) {
            if (
                e.keyCode == 8 // backspace
                || e.keyCode == 9 // tab
                || e.keyCode == 13 // enter
                || e.keyCode == 27 // escape
                || e.keyCode == 46 // delete
                || (e.keyCode >= 35 && e.keyCode <= 39) // end, home, left arrow, up arrow, right arrow
            ) {
                return;
            }
            else {
                if (!((e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 96 && e.keyCode <= 105))) {
                    // not 0-9, numpad 0-9
                    e.preventDefault();
                    return;
                }
                else {
                    var keyCode = e.keyCode;
                    if (keyCode >= 96 && keyCode <= 105) {
                        keyCode -= 48;
                    }
                    var value = $(this).val();
                    value += String.fromCharCode(keyCode);
                    value = parseInt(value, 10)
                    var maxNumber = $(this).data("maxnumber");
                    if (maxNumber) {
                        maxNumber = parseInt(maxNumber);
                        if (value > maxNumber) {
                            e.preventDefault();
                        }
                    }
                }
            }
        }
        $(function () {
            $("#SelectedBancoId").change(function () {
                var vIdBanco = $('#SelectedBancoId').val();
                if (vIdBanco == 0) {
                    WarningMessage("Debe seleccionar una Entidad Bancaría");
                    return;
                }
                switch (vIdBanco) {
                    case '1':
                        $("#txtCtaBanco").val('');
                        $("#txtCtaBanco").attr('maxlength', '20');
                        break;
                    case '2':
                        $("#txtCtaBanco").val('');
                        $("#txtCtaBanco").attr("maxlength", "13");
                        break;
                    case '3':                        
                        $("#txtCtaBanco").val('');
                        $("#txtCtaBanco").attr('maxlength', 10);
                        break;
                    case '4':
                        $("#txtCtaBanco").val('');
                        $("#txtCtaBanco").attr("maxlength", "13");
                        break;
                }

                $.ajax({
                    url: "/ActualizarPersonal/getPrefijoCtaBanco",
                    data: {
                        'pIdBanco': vIdBanco
                    },
                    async: false,
                    success: function (data) {
                        if (data) {                
                            $("#txtPrefijoCtaBanco").val(data);
                        } else {
                            WarningMessage("No se obtuvo el dato correcto");
                        }
                    },
                    error: function (ex) {
                        console.log(ex);
                    },
                    complete: function (xhr, textStatus) {

                    }
                });



            });
        });
        $(function () {
            $("#btn-grabar").on("click", function () {
                var vDocumentoIdentidad = $('#txtDocumentoIdentidad').val();

                var vDireccion = $('#txtDireccion').val();
                if (vDireccion == "") {
                    WarningMessage("Debe ingresar su dirección");
                    return;
                }
                var vTelefono = $('#txtTelefono').val();
                if (vTelefono == "") {
                    WarningMessage("Debe ingresar su número de teléfono");
                    return;
                }
                var vCelular = $('#txtCelular').val();
                if (vCelular == "") {
                    WarningMessage("Debe ingresar su número de celular");
                    return;
                }
                var vEmail = $('#txtEmail').val();
                if (vEmail == "") {
                    WarningMessage("Debe ingresar su correo electrónico");
                    return;
                }
                if (/^(([^<>()[\]\.,;:\s@@\"]+(\.[^<>()[\]\.,;:\s@@\"]+)*)|(\".+\"))@@(([^<>()[\]\.,;:\s@@\"]+\.)+[^<>()[\]\.,;:\s@@\"]{2,})$/i.test(vEmail)) {
                    
                } else {
                    WarningMessage("La dirección de email es incorrecta!.");
                    return;
                }
                var vNroHijos = $('#txtNroHijos').val();
                var vIdNivelEstudio = $('#SelectedNivelEstudioId').val();
                if (vIdNivelEstudio == 0) {
                    WarningMessage("Debe seleccionar nivel de estudio");
                    return;
                }
                var vIdFondoPensione = $('#SelectedFondoPensioneId').val();
                if (vIdFondoPensione == 0) {
                    WarningMessage("Debe seleccionar fondo de pensiones");
                    return;
                }
                var vIdSeguro = $('#SelectedSeguroId').val();
                if (vIdSeguro == 0) {
                    WarningMessage("Debe seleccionar un seguro");
                    return;
                }
                var vIdEstadoEmpleado = $('#SelectedEstadoEmpleadoId').val();
                if (vIdEstadoEmpleado == 0) {
                    WarningMessage("Debe seleccionar estado de empleado");
                    return;
                }
                var vContactoEmergencia = $('#txtContactoEmergencia').val();
                if (vContactoEmergencia == "") {
                    WarningMessage("Debe ingresar un contacto de emergencia");
                    return;
                }
                var vTelefonoEmergencia = $('#txtTelefonoEmergencia').val();
                if (vTelefonoEmergencia == 0) {
                    WarningMessage("Debe de ingresar un número de teléfono de emergencia");
                    return;
                }
                var vIdBanco = $('#SelectedBancoId').val();
                if (vIdBanco == "") {
                    WarningMessage("Debe seleccionar un banco");
                    return;
                }
                var vCtaBanco = $('#txtCtaBanco').val();
                if (vCtaBanco == "") {
                    WarningMessage("Debe de ingresar su número de cuenta bancaría");
                    return;
                }

                switch (vIdBanco) {
                    case '1':
                        if (vCtaBanco.length != 20) {
                            WarningMessage("Debe de ingresar una cuenta de 20 dígitos");
                            return;
                        }
                        break;
                    case '2':
                        if (vCtaBanco.length != 13) {
                            WarningMessage("Debe de ingresar una cuenta de 13 dígitos");
                            return;
                        }
                        break;
                    case '3':
                        if (vCtaBanco.length != 10) {
                            WarningMessage("Debe de ingresar una cuenta de 10 dígitos");
                            return;
                        }
                        break;
                    case '4':
                        if (vCtaBanco.length != 13) {
                            WarningMessage("Debe de ingresar una cuenta de 13 dígitos");
                            return;
                        }
                        break;
                }

                $.ajax({
                    url: "/ActualizarPersonal/setEmpleado",
                    data: {'pDocumentoIdentidad': vDocumentoIdentidad,
                           'pDireccion': vDireccion, 'pTelefono': vTelefono, 'pCelular': vCelular,
                           'pEmail': vEmail, 'pNroHijos': vNroHijos, 'pIdNivelEstudio': vIdNivelEstudio, 'pIdFondoPensione': vIdFondoPensione, 'pIdSeguro': vIdSeguro,
                           'pIdEstadoEmpleado': vIdEstadoEmpleado, 'pContactoEmergencia': vContactoEmergencia, 'pTelefonoEmergencia': vTelefonoEmergencia,
                           'pIdBanco': vIdBanco, 'pCtaBanco': vCtaBanco
                           },
                    async: false,
                    success: function (data) {
                        if (data) {
                            $("#btn-grabar").attr("disabled", "disabled");
                            WarningMessage("Se modifico el empleado");
                        } else {
                            WarningMessage("No se realizo la modificaciones");
                        }
                    },
                    error: function (ex) {
                        console.log(ex);
                    },
                    complete: function (xhr, textStatus) {

                    }
                });



            });
        });
    </script>
}