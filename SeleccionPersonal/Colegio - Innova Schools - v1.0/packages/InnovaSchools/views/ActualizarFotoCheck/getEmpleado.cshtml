@model InnovaSchools.Models.ActualizarFotoCheckViewModel
@using InnovaSchools.Util

@{
    ViewBag.Title = "Agregar Información de Contrato";
}

<div class="jumbotron">
    <h4>GENERAR CÓDIGO FOTOCHECK</h4>
    <hr />
    <form class="form-horizontal">
        <div class="form-inline">
            <div class="form-group">
                @Html.Label("Nro de Contrato", htmlAttributes: new {@id = "lblNroContato", @class = "control-label", @style = "width:250px;" })
                @Html.TextBoxFor(x => x.Contrato.nroContrato, new { @id = "txtNroContato", @class = "form-control input-sm", @style = "width:175px;", @maxlength = "8", @disabled = "disabled" })
            </div>
            <div class="form-group">
                @Html.Label("Nro de FotoCheck", htmlAttributes: new {@id = "lblNroFotocheck", @class = "control-label", @style = "width:200px;" })
                @Html.TextBoxFor(x => x.nroContrato, new { @id = "txtNroFotoCheck", @class = "form-control input-sm", @style = "width:175px;", @maxlength = "8", @disabled = "disabled" })
            </div>
            <div class="form-group">
            </div>
        </div>
        <div class="form-inline">
            <div class="form-group">
                @Html.Label("Tipo Docum Identidad", htmlAttributes: new { @id = "ddlDocumentoIdentidad", @class = "control-label", @style = "width:250px;" })
                @Html.DropDownListFor(m => m.SelectedDocumentoIdentidadId, new SelectList(Model.DocumentoIdentidads, "Value", "Text", "0"), "--Seleccionar--", new { @class = "form-control input-sm", @style = "width:175px;", @disabled = "disabled" })
                @Html.ValidationMessageFor(m => m.SelectedDocumentoIdentidadId)
            </div>
            <div class="form-group">
                @*@Html.LabelFor(model => model.Convocatoria.ConvocatoriaCandidato.Candidato.Persona.documentoIdentidad, htmlAttributes: new { @class = "control-label", @style = "width:170px;" })*@
                @Html.Label("Documento de Identidad", htmlAttributes: new { @class = "control-label", @style = "width:200px;" })
                @Html.TextBoxFor(x => x.Contrato.Empleado.Candidato.Persona.documentoIdentidad, new { @id = "txtDNI", @class = "form-control input-sm", @style = "width:175px;", @maxlength = "8", @disabled = "disabled" })
            </div>
            <div class="form-group">
            </div>
        </div>
        <div class="form-inline">
            <div class="form-group">
                @Html.Label("Nombre", htmlAttributes: new { @class = "control-label", @style = "width:250px;" })
                @Html.TextBoxFor(x => x.Contrato.Empleado.Candidato.Persona.nombre, new { @id = "txtNombre", @class = "form-control input-sm", @style = "width:175px;", @maxlength = "15", @disabled = "disabled" })
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Contrato.Empleado.Candidato.Persona.Nacionalidad.nacionalidad, htmlAttributes: new { @class = "control-label", @style = "width:200px;" })
                @Html.TextBoxFor(x => x.Contrato.Empleado.Candidato.Persona.Nacionalidad.nacionalidad, new { @id = "txtNacionalidad", @class = "form-control input-sm", @style = "width:175px;", @maxlength = "15", @disabled = "disabled" })
            </div>
            <div class="form-group">
            </div>
        </div>
        <div class="form-inline">
            <div class="form-group">
                @Html.Label("Ape Paterno", htmlAttributes: new { @class = "control-label", @style = "width:250px;" })                
                @Html.TextBoxFor(x => x.Contrato.Empleado.Candidato.Persona.apellidoPaterno, new { @id = "txtApPaterno", @class = "form-control input-sm", @style = "width:175px;", @maxlength = "30", @disabled = "disabled" })
            </div>
            <div class="form-group">
                @Html.Label("Ape Materno", htmlAttributes: new { @class = "control-label", @style = "width:200px;" })
                @Html.TextBoxFor(x => x.Contrato.Empleado.Candidato.Persona.apellidoMaterno, new { @id = "txtApMaterno", @class = "form-control input-sm", @style = "width:175px;", @maxlength = "30", @disabled = "disabled" })
            </div>
            <div class="form-group">
            </div>
        </div>
        <div class="form-inline">
            <div class="form-group">
                @Html.Label("Tipo Puesto", htmlAttributes: new { @id = "ddlTipoPuesto", @class = "control-label", @style = "width:250px;" })
                @Html.DropDownListFor(m => m.SelectedTipoPuestoId, new SelectList(Model.TipoPuestos, "Value", "Text", "0"), "--Seleccionar--", new { @class = "form-control input-sm", @style = "width:175px; ", @disabled = "disabled" })
                @Html.ValidationMessageFor(m => m.SelectedTipoPuestoId)  
            </div>
            <div class="form-group">
                @Html.Label("Puesto", htmlAttributes: new { @id = "ddlPuesto", @class = "control-label", @style = "width:200px;" })
                @Html.DropDownListFor(m => m.SelectedPuestoId, new SelectList(Model.Puestos, "Value", "Text", "0"), "--Seleccionar--", new { @class = "form-control input-sm", @style = "width:175px; ", @disabled = "disabled" })
                @Html.ValidationMessageFor(m => m.SelectedPuestoId)  
            </div>
            <div class="form-group">
            </div>
        </div>
       <div class="form-inline">
            <div class="form-group">
                @Html.Label("Área", htmlAttributes: new { @id = "ddlArea", @class = "control-label", @style = "width:250px;" })
                @Html.DropDownListFor(m => m.SelectedAreaId, new SelectList(Model.Areas, "Value", "Text", "0"), "--Seleccionar--", new { @class = "form-control input-sm", @style = "width:175px;", @disabled = "disabled" })
                @Html.ValidationMessageFor(m => m.SelectedAreaId)
            </div>
            <div class="form-group">
                @Html.Label("Desarrollo", htmlAttributes: new { @id = "ddlDesarrollo", @class = "control-label", @style = "width:200px;" })
                @Html.DropDownListFor(m => m.SelectedDesarrolloId, new SelectList(Model.Desarrollos, "Value", "Text", "0"), "--Seleccionar--", new { @class = "form-control input-sm", @style = "width:175px;", @disabled = "disabled" })
                @Html.ValidationMessageFor(m => m.SelectedDesarrolloId)
            </div>
            <div class="form-group">
            </div>
        </div>
    </form>
    <hr style="color: #0056b2;" />
    <form class="form-horizontal">
        <div class="form-inline">
             <div class="form-group">
                @Html.Label("Tipo de Contrato", htmlAttributes: new { @id = "ddlTipoContrato", @class = "control-label", @style = "width:250px;" })
                @Html.DropDownListFor(m => m.SelectedTipoContratoId, new SelectList(Model.TipoContratos, "Value", "Text", "0"), "--Seleccionar--", new { @class = "form-control input-sm", @style = "width:175px;", @disabled = "disabled" })
                @Html.ValidationMessageFor(m => m.SelectedTipoContratoId)               
            </div>
            <div class="form-group">
                @Html.Label("Duración", htmlAttributes: new { @id = "ddlTipoContratoTiempo", @class = "control-label", @style = "width:200px;" })
                @Html.DropDownListFor(m => m.SelectedTipoContratoTiempoId, new SelectList(Model.TipoContratoTiempos, "Value", "Text", "0"), "--Seleccionar--", new { @class = "form-control input-sm", @style = "width:175px;", @disabled = "disabled" })
                @Html.ValidationMessageFor(m => m.SelectedTipoContratoTiempoId)               
            </div>           
            <div class="form-group">
            </div>
        </div>
        <div class="form-inline">
            <div class="form-group">
                @Html.LabelFor(model => model.fechaInicioPublicacionStr, htmlAttributes: new { @class = "control-label", @style = "width:250px;" })
                @Html.TextBoxFor(x => x.fechaInicioPublicacionStr, new { @id = "txtFchInicioPublicacion", @class = "form-control", @style = "width:175px;", @maxlength = "10", @disabled = "disabled" })    
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.fechaFinPublicacionStr, htmlAttributes: new { @class = "control-label", @style = "width:200px;" })
                @Html.TextBoxFor(x => x.fechaFinPublicacionStr, new { @id = "txtFchFinPublicacion", @class = "form-control", @style = "width:175px;", @maxlength = "10", @disabled = "disabled" })
            </div>
            <div class="form-group">
            </div>
        </div>
       
        <div class="form-inline">
            <div class="form-group">
                <br />
                @Html.Label(" ", htmlAttributes: new { @class = "control-label", @style = "width:250px;" })
                <input type="button" id="btn-grabar" value="Grabar" class="btn btn-success btn-sm" />
                @Html.ActionLink("Cancelar", "Index", null, null, htmlAttributes: new { @class = "btn btn-danger btn-sm" })
            </div>
            <div class="form-group">
            </div>
        </div>
    </form>    
</div>

@section Scripts {
    @*<link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">*@
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
    <script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>


    <script src="~/Scripts/bootstrap-filestyle.min.js" type="text/javascript"></script>
    <script src="//code.jquery.com/ui/1.10.4/jquery-ui.js"></script>
    <script src="~/Scripts/jquery.maskedinput.min.js"></script>

    <script type="text/javascript">
        $(document).ready(function () {
            //$('#lblNroContato').hide();
            //$("#txtNroContato").css("display", "none");

            $.datepicker.regional['es'] = {
                closeText: 'Cerrar',
                prevText: '<Ant',
                nextText: 'Sig>',
                currentText: 'Hoy',
                monthNames: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
                monthNamesShort: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],
                dayNames: ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'],
                dayNamesShort: ['Dom', 'Lun', 'Mar', 'Mié', 'Juv', 'Vie', 'Sáb'],
                dayNamesMin: ['Do', 'Lu', 'Ma', 'Mi', 'Ju', 'Vi', 'Sá'],
                weekHeader: 'Sm',
                dateFormat: 'dd/mm/yy',
                firstDay: 1,
                isRTL: false,
                showMonthAfterYear: false,
                yearSuffix: ''
            };
            $.datepicker.setDefaults($.datepicker.regional['es']);

            $("#ddlFecha_ingreso").datepicker({
                minDate: new Date(),
                onClose: function (selectedDate) {
                    $("#ddlFecha_cese").datepicker("option", "minDate", selectedDate);
                },
            });

            $("#ddlFecha_cese").datepicker({
                onClose: function (selectedDate) {
                    $("#ddlFecha_ingreso").datepicker("option", "maxDate", selectedDate);
                }
            });
            $("#ddlFecha_ingreso").datepicker({ dateFormat: "dd/mm/yy" }).mask("99/99/9999");
            $("#ddlFecha_cese").datepicker({ dateFormat: "dd/mm/yy" }).mask("99/99/9999");

            var vIdBanco = $('#SelectedBancoId').val();
            if (vIdBanco == 0) {
                WarningMessage("Debe seleccionar una Entidad Bancaría");
                return;
            }
            switch (vIdBanco) {
                case '1':
                    $("#txtCtaBanco").attr('maxlength', '20');
                    break;
                case '2':
                    $("#txtCtaBanco").attr("maxlength", "13");
                    break;
                case '3':
                    $("#txtCtaBanco").attr('maxlength', 10);
                    break;
                case '4':
                    $("#txtCtaBanco").attr("maxlength", "13");
                    break;
            }
        });
        $(".input-sm").keypress(function (key) {
            window.console.log(key.charCode)
            if ((key.charCode < 97 || key.charCode > 122)//letras mayusculas
                && (key.charCode < 65 || key.charCode > 90) //letras minusculas
                && (key.charCode != 45) //retroceso
                && (key.charCode != 241) //ñ
                 && (key.charCode != 209) //Ñ
                 && (key.charCode != 32) //espacio
                 && (key.charCode != 225) //á
                 && (key.charCode != 233) //é
                 && (key.charCode != 237) //í
                 && (key.charCode != 243) //ó
                 && (key.charCode != 250) //ú
                 && (key.charCode != 193) //Á
                 && (key.charCode != 201) //É
                 && (key.charCode != 205) //Í
                 && (key.charCode != 211) //Ó
                 && (key.charCode != 218) //Ú
                )
                return false;
        });
        $("#txtDNI").on("keydown", numericTextBox);
        $("#txtTelefono").on("keydown", numericTextBox);
        $("#txtCelular").on("keydown", numericTextBox);
        $("#txtSalario").on("keydown", numericTextBox);
        $("#txtCtaBanco").on("keydown", numericTextBox);
        function numericTextBox(e) {
            if (
                e.keyCode == 8 // backspace
                || e.keyCode == 9 // tab
                || e.keyCode == 13 // enter
                || e.keyCode == 27 // escape
                || e.keyCode == 46 // delete
                || (e.keyCode >= 35 && e.keyCode <= 39) // end, home, left arrow, up arrow, right arrow
            ) {
                return;
            }
            else {
                if (!((e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 96 && e.keyCode <= 105))) {
                    // not 0-9, numpad 0-9
                    e.preventDefault();
                    return;
                }
                else {
                    var keyCode = e.keyCode;
                    if (keyCode >= 96 && keyCode <= 105) {
                        keyCode -= 48;
                    }
                    var value = $(this).val();
                    value += String.fromCharCode(keyCode);
                    value = parseInt(value, 10)
                    var maxNumber = $(this).data("maxnumber");
                    if (maxNumber) {
                        maxNumber = parseInt(maxNumber);
                        if (value > maxNumber) {
                            e.preventDefault();
                        }
                    }
                }
            }
        }

        $(function () {
            $("#SelectedBancoId").change(function () {
                var vIdBanco = $('#SelectedBancoId').val();
                if (vIdBanco == 0) {
                    WarningMessage("Debe seleccionar una Entidad Bancaría");
                    return;
                }
                switch (vIdBanco) {
                    case '1':
                        $("#txtCtaBanco").val('');
                        $("#txtCtaBanco").attr('maxlength', '20');
                        break;
                    case '2':
                        $("#txtCtaBanco").val('');
                        $("#txtCtaBanco").attr("maxlength", "13");
                        break;
                    case '3':
                        $("#txtCtaBanco").val('');
                        $("#txtCtaBanco").attr('maxlength', 10);
                        break;
                    case '4':
                        $("#txtCtaBanco").val('');
                        $("#txtCtaBanco").attr("maxlength", "13");
                        break;
                }

                $.ajax({
                    url: "/GenerarContrato/getPrefijoCtaBanco",
                    data: {
                        'pIdBanco': vIdBanco
                    },
                    async: false,
                    success: function (data) {
                        if (data) {
                            $("#txtPrefijoCtaBanco").val(data);
                        } else {
                            WarningMessage("No se obtuvo el dato correcto");
                        }
                    },
                    error: function (ex) {
                        console.log(ex);
                    },
                    complete: function (xhr, textStatus) {

                    }
                });



            });
        });

        $(function () {
            $("#btn-grabar").on("click", function () {
                var vDniVal = $('#txtNroContato').val();
                
                $.ajax({
                    url: "/ActualizarFotoCheck/setEmpleado",
                    data: {
                           'pDni': vDniVal
                        },
                    async: false,
                    success: function (data) {
                        if (data) {
                            $("#btn-grabar").attr("disabled", "disabled");
                                                       
                            $("#txtNroFotoCheck").val(data);
                            WarningMessage("Se genero el número de fotocheck:" + data);
                        } else {
                            WarningMessage("No se realizo la modificaciones");
                        }
                    },
                    error: function (ex) {
                        console.log(ex);
                    },
                    complete: function (xhr, textStatus) {

                    }
                });
            });
        });

    </script>
}